openapi: 3.0.3
info:
  title: I_AccountLimit_Service
  description:  Über diese Schnittstelle werden die Limits eines Nutzer-Accounts abgefragt
  version: 1.1.2
  ### 1.1.2
  # - changed servers -url
  # - added object property AccountLimit.kasMailSizeThreshold
  # - added traceId to Error object
  ### 1.1.1
  # - changed minimum value for maxMailSize
  # - changed descriptions
  ### 1.1
  # - changed version number in server url
  # - removed quotation marks and added minimum value for maxMailSize
  ### 1.0.0
  # - initial Version of I_AccountLimit_Service

externalDocs:
  description: GitHub - Dokumentation
  url: https://github.com/gematik/api-kim
servers:
- url: /AccountLimit/v1.1/
  # Die URL muss wie folgt gebildet werden:
  # https://<FQDN gemäß DNS-SD SRV RR>:<Port gemäß DNS-SD SRV RR><Base-path gemäß TXT RR><path gemäß yaml Datei>
  # Die SRV und TXT RR sind unter dem Resource Record Bezeichner <accmgr_service_name> zu finden.
tags:
- name: AccountLimit

security:
  - bearerAuth: []
    # Die Authentisierung erfolgt für alle Operationen über ein JWT
    
paths:
##--
##------
  /limit/{username}:
    get:
      tags:
      - AccountLimit
      summary: Limits eines Accounts abfragen
      description: Gibt die Limits eines Accounts zurück
      operationId: getLimits
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          $ref: '#/components/schemas/Username'
      - in: header
        name: password
        description: Passwort für den Email-Account. Das Passwort ist base64 encoded.
        required: true
        schema:
          $ref: '#/components/schemas/Password'
      responses:
        200:
          description: OK
             # Rückgabe der Metadaten eines Nutzer-Accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLimit'
        401:
          description: Authentifizierung fehlgeschlagen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Mail Account nicht vorhanden
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - AccountLimit
      summary: Limits eines Accounts abfragen
      description: Gibt die Limits eines Accounts zurück
      operationId: setLimits
      parameters:
      - name: username
        in: path
        description: Username/E-Mail des Accounts
        required: true
        schema:
          $ref: '#/components/schemas/Username'
      - in: header
        name: password
        description: Passwort für den Email-Account. Das Passwort ist base64 encoded.
        required: true
        schema:
          $ref: '#/components/schemas/Password'
      responses:
        200:
          description: OK
             # Rückgabe der Metadaten eines Nutzer-Accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountLimit'
        401:
          description: Authentifizierung fehlgeschlagen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Mail Account nicht vorhanden
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

##--
##------
components:
  schemas:
    Password:
      type: string
      minLength: 12
      maxLength: 256
      format: password
      description: Passwort für den Email-Account. Das Passwort ist base64 encoded.

    Username:
      type: string
      maxLength: 256
      format: email
      description: Username/E-Mail des Accounts.

    AccountLimit:
      type: object
      properties:
        dataTimeToLive:
          type: integer
          maxLength: 3
          minimum: 10
          maximum: 90
          default: 90
          example: 90
          description: Speicherdauer von Mails auf dem Mailserver und Anhängen auf dem KAS Fachdienst/KAS. Angabe in Tagen.
        maxMailSize:
          type: integer
          format: int64
          minimum: 734003200
          example: 734003200
          description: Setzt die maximale Größe einer KIM-Mail in Bytes
        kasMailSizeThreshold:
          type: integer
          format: int64
          readOnly: true
          minimum: 0
          maximum: 15728640
          default: 15728640
          description: Schwellwert der im KIM-Clientmodul empfangenen Datenmenge, ab dem die Daten über den definierten KAS-Prozess verarbeitet werden.
        quota:
          type: integer
          format: int64
          readOnly: true
          example: 160000000000
          description: Gibt das maximale Speichervolumen für einen Nutzer-Account an
        remainQuota:
          type: integer
          format: int64
          readOnly: true          
          example: 112000000000
          description: Gibt das verbleibende Speichervolumen für einen Nutzer-Account an

    Error:
      type: object
      properties:
        message:
          type: string
        traceId:
          type: string
          maxLength: 255
          example: 19aaf69260f63694
          description: Eindeutige Zeichenkette zur Rückverfolgung des Fehlers im Fachdienst

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
       # Das JWT wird in compact serialization (RFC 7515, Section 3.1) kodiert und im HTTP-Header Authorization nach dem Bearer-Schema übertragen.